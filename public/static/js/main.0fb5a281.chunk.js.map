{"version":3,"sources":["constants/actions.js","constants/AppStatus.js","reducers/index.js","store/index.js","actions/index.js","components/Message.js","components/SubmitButton.js","components/ClearButton.js","pages/Home.js","App.js","serviceWorker.js","helper-debug/index.js","index.js"],"names":["CHANGE_APP_STATUS","EMPTY","initialState","status","STATUS","rootReducer","state","arguments","length","undefined","action","type","ACTIONS","payload","store","createStore","applyMiddleware","thunk","changeAppStatus","submitJson","dispatch","axios","json","then","response","result","data","valid","Message","connect","props","react_default","a","createElement","className","SubmitButton","classButton","onClick","handleSubmit","ClearButton","clearInput","Home","_useState","useState","_useState2","Object","slicedToArray","jsonInput","setJsonInput","name","id","cols","rows","onChange","e","target","value","components_Message","components_SubmitButton","components_ClearButton","App","pages_Home","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fb5a281.chunk.js","sourcesContent":["export const ADD_JSON_INPUT = \"ADD_JSON_INPUT\";\nexport const DELETE_JSON_INPUT = \"DELETE_JSON_INPUT\";\nexport const SUBMIT_JSON = \"SUBMIT_JSON\";\nexport const CHANGE_APP_STATUS = \"CHANGE_APP_STATUS\";\n\n","// here are the posible status for the response and through them we can know what message display in the app\n\nexport const VALID_JSON = \"VALID_JSON\";\nexport const INVALID_JSON = \"INVALID_JSON\";\nexport const WAITING_SUBMIT = \"WAITING_SUBMIT\";\nexport const WAITING_RESPONSE = \"WAITING_RESPONSE\";\nexport const EMPTY = \"INPUT_EMPTY\";\n","import * as ACTIONS from \"../constants/actions\";\nimport * as STATUS from \"../constants/AppStatus\";\n\nconst initialState = {\n  status: STATUS.EMPTY\n\n};\n\nfunction rootReducer(state = initialState, action) {\n  switch (action.type){\n    case ACTIONS.CHANGE_APP_STATUS:\n      return {status: action.payload};\n    default:\n      return state\n  }\n\n\n}\n\nexport default rootReducer;\n","import {applyMiddleware, createStore} from \"redux\"\nimport rootReducer from \"../reducers/index\"\nimport thunk from 'redux-thunk'\n\nconst store = createStore(rootReducer,applyMiddleware(thunk ));\nexport default store;\n","import * as ACTIONS from \"../constants/actions\";\n\nimport * as STATUS from \"../constants/AppStatus\"\nimport * as axios from \"axios\";\nimport store from \"../store\";\n\n\n\nexport const changeAppStatus = (payload) => {\n  return {type: ACTIONS.CHANGE_APP_STATUS, payload}\n};\n\nexport const submitJson = (payload) => (dispatch) => {\n  dispatch(changeAppStatus(STATUS.WAITING_RESPONSE));\n\n\n axios.post(\"/validate-json\",{json:payload})\n    .then((response)=>{\n      let result = response.data.valid;\n      if(result === true){\n        dispatch(changeAppStatus(STATUS.VALID_JSON))\n      }else\n        dispatch(changeAppStatus(STATUS.INVALID_JSON));\n    })\n\n\n\n};\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport * as STATUS from \"../constants/AppStatus\";\n\nconst mapStateToProps = state => {\n  return {status: state.status}\n};\n\nlet MessageComponent = (props) => {\n  let status;\n\n  switch (props.status) {\n    case (STATUS.INVALID_JSON):\n      status = <div className=\"text-red-500 font-bold text-xl\">the <span className=\"text-gray-800\">JSON</span>  is invalid</div>;\n      break;\n    case (STATUS.VALID_JSON):\n      status = <div className=\"text-gray-800 font-bold text-xl\">your input is a valid <span className=\"text-red-800\">JSON</span></div>;\n      break;\n    case (STATUS.WAITING_RESPONSE):\n      status = <div className=\"text-green-700 font-bold text-xl\">Please wait...</div>;\n      break;\n    default:\n      status = <div className=\"text-gray-800 font-bold text-xl\">please insert a <span className=\"text-red-800\">JSON</span>  and press <span className=\"font-extrabold\">Submit</span> </div> ;\n      break;\n  }\n\n  return (\n    <div className=\"py-5\">\n      {status}\n    </div>\n  )\n\n};\n\n\n\nlet Message = connect(mapStateToProps)(MessageComponent);\nexport default Message\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport * as STATUS from \"../constants/AppStatus\";\n\nconst mapStateToProps = state => {\n  return {status: state.status}\n};\n\nlet SubmitButtonComponent = (props) => {\n\n  let isDisabled = props.status !== STATUS.WAITING_SUBMIT ;\n\n  //disabled react att seems not works with tailwind\n  let classButton = \"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded inline-block\";\n\n  //disabled react att seems not works with tailwind\n  if(isDisabled){\n    classButton += \" opacity-50 cursor-not-allowed\"\n  }\n\n\n  return (\n    <div className=\"inline-block mx-10 mt-8\">\n      <button\n        type=\"button\"\n\n        className={classButton}\n        onClick={props.handleSubmit}>SUBMIT</button>\n    </div>\n  )\n\n};\n\n\n\nlet SubmitButton = connect(mapStateToProps)(SubmitButtonComponent);\nexport default SubmitButton\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport * as STATUS from \"../constants/AppStatus\";\n\nconst mapStateToProps = state => {\n  return {status: state.status}\n};\n\nlet ClearButtonComponent = (props) => {\n\n  let isDisabled = props.status === STATUS.WAITING_RESPONSE || props.status === STATUS.EMPTY;\n\n  let classButton = \"bg-transparent hover:bg-red-500 text-red-700 font-semibold hover:text-white py-2 px-4 border border-red-500 hover:border-transparent rounded\";\n\n  //disabled react att seems not works with tailwind\n  if(isDisabled){\n    classButton += \" opacity-50 cursor-not-allowed\"\n  }\n\n\n\n  return (\n    <div className=\"inline-block\">\n      <button\n        className={classButton}\n        onClick={props.clearInput}>CLEAR</button>\n    </div>\n  )\n\n};\n\n\n\nlet ClearButton = connect(mapStateToProps)(ClearButtonComponent);\nexport default ClearButton\n","import React,{useState} from 'react';\nimport {connect} from \"react-redux\";\nimport {submitJson,changeAppStatus} from \"../actions\";\nimport * as STATUS from '../constants/AppStatus'\nimport Message from \"../components/Message\";\nimport SubmitButton from \"../components/SubmitButton\";\nimport ClearButton from \"../components/ClearButton\";\n\nconst mapStateToProps = state => {\n  return {status: state.status}\n};\n\n\nlet HomeComponent = (props) => {\n  const [jsonInput, setJsonInput] = useState(\"\");\n\n  const handleInputChange = e => {\n    if (e.target.value.length > 0) {\n      props.dispatch(changeAppStatus(STATUS.WAITING_SUBMIT));\n    }\n    else{\n      props.dispatch(changeAppStatus(STATUS.EMPTY));\n    }\n\n    setJsonInput(e.target.value);\n  };\n\n  const clearInput = () => {\n    props.dispatch(changeAppStatus(STATUS.EMPTY));\n    setJsonInput(\"\");\n  };\n\n  const handleSubmit = () => {\n    props.dispatch(submitJson(jsonInput));\n  };\n\n\n  return (\n    <div>\n      <div className=\"text-5xl text-yellow-900 pt-12\">\n        <span className=\"text-red-800 font-bold\">JSON </span>\n        <span className=\"font-light italic\">validator</span>\n      </div>\n      <div className=\"mt-5 w-4/6 mx-auto\">\n        <textarea name=\"\" id=\"\" cols=\"50\" rows=\"6\" onChange={handleInputChange} value={jsonInput}/>\n        <Message/>\n        <SubmitButton handleSubmit={handleSubmit}/>\n        <ClearButton clearInput={clearInput}/>\n      </div>\n\n\n    </div>\n\n  )\n};\n\n\nlet Home = connect(mapStateToProps)(HomeComponent);\nexport default Home\n","import React from 'react';\n\nimport './App.css';\n\nimport Home from \"./pages/Home\";\n\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import store from \"../store/index\"\nimport {changeAppStatus,submitJson} from \"../actions\";\n\nwindow.store = store;\n//window.addArticle = addArticle;\nwindow.changeAppStatus = changeAppStatus;\nwindow.submitJson = submitJson;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './css/tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\n\n// eslint-disable-next-line no-unused-vars\nimport index from \"./helper-debug/index\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n\n\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}